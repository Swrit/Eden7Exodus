//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Managers/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""TankControls"",
            ""id"": ""e72979f6-28f6-4f3f-8cda-0d6c866c5a9c"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""eb01ca24-3318-4a90-b987-915a7bea18d1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""54aac595-4943-4594-bf4a-4a0f59ce1396"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryAction"",
                    ""type"": ""Button"",
                    ""id"": ""86abdd93-03ef-4544-ae93-56b0a5b5e9a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""b0593681-6daf-4e3c-94ba-52bce106184b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c0df1ad1-4234-4e6f-ad17-9d1eb306fd6b"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b2a63bb1-1811-4f78-a878-3383ac2a3088"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a3cb068d-c3b5-4442-a5f6-f76868306dc4"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b79a01b-1998-4ff9-b77f-355047a4503a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""343de221-3033-4adf-b044-164a8bb3b89d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d5f5473-653a-4a85-a34f-f6b73a6607dc"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TankControls
        m_TankControls = asset.FindActionMap("TankControls", throwIfNotFound: true);
        m_TankControls_Up = m_TankControls.FindAction("Up", throwIfNotFound: true);
        m_TankControls_Down = m_TankControls.FindAction("Down", throwIfNotFound: true);
        m_TankControls_PrimaryAction = m_TankControls.FindAction("PrimaryAction", throwIfNotFound: true);
        m_TankControls_Exit = m_TankControls.FindAction("Exit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TankControls
    private readonly InputActionMap m_TankControls;
    private ITankControlsActions m_TankControlsActionsCallbackInterface;
    private readonly InputAction m_TankControls_Up;
    private readonly InputAction m_TankControls_Down;
    private readonly InputAction m_TankControls_PrimaryAction;
    private readonly InputAction m_TankControls_Exit;
    public struct TankControlsActions
    {
        private @PlayerInputs m_Wrapper;
        public TankControlsActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_TankControls_Up;
        public InputAction @Down => m_Wrapper.m_TankControls_Down;
        public InputAction @PrimaryAction => m_Wrapper.m_TankControls_PrimaryAction;
        public InputAction @Exit => m_Wrapper.m_TankControls_Exit;
        public InputActionMap Get() { return m_Wrapper.m_TankControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TankControlsActions set) { return set.Get(); }
        public void SetCallbacks(ITankControlsActions instance)
        {
            if (m_Wrapper.m_TankControlsActionsCallbackInterface != null)
            {
                @Up.started -= m_Wrapper.m_TankControlsActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_TankControlsActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_TankControlsActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_TankControlsActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_TankControlsActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_TankControlsActionsCallbackInterface.OnDown;
                @PrimaryAction.started -= m_Wrapper.m_TankControlsActionsCallbackInterface.OnPrimaryAction;
                @PrimaryAction.performed -= m_Wrapper.m_TankControlsActionsCallbackInterface.OnPrimaryAction;
                @PrimaryAction.canceled -= m_Wrapper.m_TankControlsActionsCallbackInterface.OnPrimaryAction;
                @Exit.started -= m_Wrapper.m_TankControlsActionsCallbackInterface.OnExit;
                @Exit.performed -= m_Wrapper.m_TankControlsActionsCallbackInterface.OnExit;
                @Exit.canceled -= m_Wrapper.m_TankControlsActionsCallbackInterface.OnExit;
            }
            m_Wrapper.m_TankControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @PrimaryAction.started += instance.OnPrimaryAction;
                @PrimaryAction.performed += instance.OnPrimaryAction;
                @PrimaryAction.canceled += instance.OnPrimaryAction;
                @Exit.started += instance.OnExit;
                @Exit.performed += instance.OnExit;
                @Exit.canceled += instance.OnExit;
            }
        }
    }
    public TankControlsActions @TankControls => new TankControlsActions(this);
    public interface ITankControlsActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnPrimaryAction(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
    }
}
